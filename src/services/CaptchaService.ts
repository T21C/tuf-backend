import path from "path";
import { logger } from "../utils/logger.js";
import { RecaptchaEnterpriseServiceClient } from '@google-cloud/recaptcha-enterprise';
import { fileURLToPath } from "url";
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const keyPath = path.join(__dirname, '../config/recaptcha-service-key.json')
const key = JSON.parse(fs.readFileSync(keyPath, 'utf8'));

export default class CaptchaService {
  private recaptchaClient: RecaptchaEnterpriseServiceClient | null;

  constructor() {
    this.recaptchaClient = null;
    this.getInstance();
  }

/**
 * Get or create a reCAPTCHA Enterprise client
 */
  public getInstance = (): RecaptchaEnterpriseServiceClient => {
    if (!this.recaptchaClient) {
      this.recaptchaClient = new RecaptchaEnterpriseServiceClient({
        credentials: key,
      });
    logger.info('Created new reCAPTCHA Enterprise client');
    }
    return this.recaptchaClient;
  };

/**
 * Verify a reCAPTCHA token using Google Cloud reCAPTCHA Enterprise
 * 
 * @param token - The token generated by the reCAPTCHA client
 * @param action - The action name that was executed (e.g., 'login', 'register')
 * @returns A promise that resolves to the risk score (0.0 to 1.0) or null if verification failed
 */
public verifyCaptcha = async (token: string, action: string): Promise<number | null> => {
    try {
        // Check if required environment variables are set
        logger.info('Verifying reCAPTCHA token', { token, action });
        if (!process.env.GOOGLE_CLOUD_PROJECT_ID) {
            logger.error('GOOGLE_CLOUD_PROJECT_ID is not set in environment variables');
            return null;
        }

        if (!process.env.RECAPTCHA_SITE_KEY) {
            logger.error('RECAPTCHA_SITE_KEY is not set in environment variables');
            return null;
        }

        const projectID = process.env.GOOGLE_CLOUD_PROJECT_ID;
        const recaptchaKey = process.env.RECAPTCHA_SITE_KEY;

        // Get the reCAPTCHA client
        const client = this.getInstance();
        const projectPath = client.projectPath(projectID);

        // Build the assessment request
        const request = {
            assessment: {
                event: {
                    token: token,
                    siteKey: recaptchaKey,
                },
            },
            parent: projectPath,
        };

        // Create the assessment
        const [response] = await client.createAssessment(request);
        logger.debug('reCAPTCHA assessment created', {
            action,
            response: JSON.stringify(response),
            valid: response?.tokenProperties?.valid
        });

        // Check if the token is valid
        if (!response?.tokenProperties?.valid) {
            logger.warn('reCAPTCHA token invalid', {
                reason: response?.tokenProperties?.invalidReason,
                action
            });
            return null;
        }
        // Get the risk score
        const score = response?.riskAnalysis?.score;

        // Log the risk score and reasons
        logger.info('reCAPTCHA verification successful', {
            action,
            score,
            reasons: response?.riskAnalysis?.reasons
        });
    
        return score || null;
    
    } catch (error: any) {
        logger.error('reCAPTCHA verification failed', {
            error: error.message,
            stack: error.stack
        });
        return null;
    }
};


/**
 * Check if a captcha verification is required based on the risk score
 * 
 * @param score - The risk score from reCAPTCHA (0.0 to 1.0)
 * @param threshold - The threshold below which verification is required (default: 0.5)
 * @returns true if verification is required, false otherwise
 */
  public isVerificationRequired = (score: number | null, threshold: number = 0.5): boolean => {
    if (score === null) {
      // If verification failed, require additional verification
      return true;
  }
  
  // Lower scores indicate higher risk
    return score < threshold;
  };
}
